"encoding
if has("mac || win32unix")
    set encoding=utf-8 "the type of encoding used by Vim system
elseif has("win64 || win32")
    set encoding=cp932 "the type of encoding used by Vim system

endif

set fenc=utf-8 "the type of encoding used in a current buffer

"command
set showcmd
set laststatus=2
set wildmenu

"window
set number
set cursorline
set visualbell
set showmatch

"indent
set tabstop=4 "the length of <Tab> in a file
set expandtab "replace <Tab> to space
set softtabstop=4 "the length of space being put when you enter <Tab>
set autoindent
set smartindent
set shiftwidth=4 "the length of space automatically put by Vim

"text saerch
set hlsearch
set incsearch
set wrapscan

"recovery file
" set noswapfile
" set nobackup
" set viminfo=
" set noundofile

"shortcuts for daily log
nnoremap <F6> <ESC>i---> <C-R>=strftime("%Y/%m/%d %H:%M")<CR> ---><CR>
nnoremap <F7> <ESC>i**** Today's WANT TO ****<CR>
nnoremap <F8> <ESC>i==== Today's Accomplishment! ====<CR>

"shortcuts for operating buffer
nnoremap <silent>bp :bprevious<CR>
nnoremap <silent>bn :bnext<CR>
nnoremap <silent>bf :bf<CR>
nnoremap <silent>bl :bl<CR>
nnoremap <silent>bb :b#<CR>
nnoremap <silent>bm :bm<CR>
nnoremap <silent>bd :bdelete<CR>

"meta key
let mapleader = "\<Space>"

"edit and quit
nnoremap <Leader>w :w<CR>
vmap     <Leader>y "+y
vmap     <Leader>d "+d
nmap     <Leader>p "+p
nmap     <Leader>P "+P
vmap     <Leader>p "+p
vmap     <Leader>P "+P
nnoremap <Leader>q :q<CR>
nnoremap <Leader>wq :wq<CR>

"color scheme
syntax on
colorscheme PaperColor
if (has("termguicolors"))
 set termguicolors
endif


"NeoBundle Scripts ------------------------------------

if &compatible
	set nocompatible
endif

if has('vim_starting')

    if has("mac") "mac
        set runtimepath+=~/.vim/bundle/neobundle.vim
        call neobundle#begin(expand('~/.vim/bundle'))

    elseif has("win64 || win32") "windows
        set runtimepath+=~\vimfiles\bundle\neobundle.vim
        call neobundle#begin(expand('~\vimfiles\bundle'))

    elseif has("win32unix") "cygwin
        set runtimepath+=~/.vim/bundle/neobundle.vim
        call neobundle#begin(expand('~/.vim/bundle'))

    endif

endif

NeoBundleFetch 'Shougo/neobundle.vim'

"Unite.vim
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim' " :Unite file_mru
NeoBundle 'ujihisa/unite-colorscheme'
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> <space>ub :<C-u>Unite buffer<CR>
nnoremap <silent> <space>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> <space>ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <space>uu :<C-u>Unite file_mru buffer<CR>
nnoremap <silent> <space>ug :<C-u>Unite grep<CR>

NeoBundle 'simeji/winresizer'
let g:winresizer_vert_resize=2
let g:winresizer_horiz_resize=2

NeoBundle 'dhruvasagar/vim-table-mode'

NeoBundle 'tpope/vim-fugitive'
nnoremap <silent><Leader>gb :Gblame<CR>
nnoremap <silent><Leader>gd :Gdiff<CR>
nnoremap <silent><Leader>gs :Gstatus<CR>
nnoremap <silent><Leader>gw :Gwrite<CR>

"edit EverNote with vim
" NeoBundle 'kakkyz81/evervim'
" let g:evervim_devtoken='<トークン>'

"VimShell
NeoBundle 'Shougo/vimshell.vim'
nnoremap <silent><Leader>vs :VimShell<CR>
nnoremap <silent><Leader>vvs :VimShellPop<CR>

":Vinarise path
NeoBundle 'Shougo/vinarise'

NeoBundle 'davidhalter/jedi-vim'
autocmd FileType python setlocal completeopt-=preview

NeoBundle 'vim-jp/vimdoc-ja'

NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
set ambiwidth=double
let g:airline_theme = 'badwolf'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#buffer_idx_format = {'0': '0 ', '1': '1 ', '2': '2 ', '3': '3 ', '4': '4 ', '5': '5 ', '6': '6 ', '7': '7 ', '8': '8 ', '9': '9 '} 

NeoBundle 'MattesGroeger/vim-bookmarks'
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = '>>'
let g:bookmark_annotation_sign = '##'
let g:bookmark_no_default_key_mappings = 1

highlight BookmarkSign           guifg=#FF7C6C
highlight BookmarkAnnotationSign guifg=#FF7C6C
highlight BookmarkLine           guifg=#FF7C6C
highlight BookmarkAnnotationLine guifg=#FF7C6C
function! BookmarkMapKeys()
  nmap mm  :BookmarkToggle<CR>
  nmap mi  :BookmarkAnnotate<CR>
  nmap mn  :BookmarkNext<CR>
  nmap mp  :BookmarkPrev<CR>
  nmap mo  :BookmarkShowAll<CR>
  nmap mc  :BookmarkClear<CR>
  nmap mx  :BookmarkClearAll<CR>
  nmap mkk :BookmarkMoveUp<CR>
  nmap mjj :BookmarkMoveDown<CR>
endfunction
function! BookmarkUnmapKeys()
  unmap mm
  unmap mi
  unmap mn
  unmap mp
  unmap mo
  unmap mc
  unmap mx
  unmap mkk
  unmap mjj
endfunction
autocmd BufEnter *           :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()

NeoBundle 'tomtom/tcomment_vim'

NeoBundle 'nathanaelkane/vim-indent-guides'

NeoBundle 'open-browser.vim'
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'mingw32_make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
\ }

NeoBundle "osyo-manga/unite-quickfix"
NeoBundle "osyo-manga/shabadou.vim"

NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config = {
    \ "_" : {
      \ 'runner': 'vimproc',
      \ 'runner/vimproc/updatetime' : 60,
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/info'  : 1,
      \ 'outputter/buffer/close_on_empty'  : 1,
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error' : 'quickfix',
      \ 'outputter' : 'error',
      \ 'hook/time/enable ' : 1,
      \ 'hook/time/format': '*** time: %g seconds ***',
      \ 'hook/output_encode/enable' : 1,
      \ 'hook/output_encode/encoding' : 'utf-8:&encoding',
      \ 'hook/shabadoubi_touch_henshin/enable' : 1,
      \ 'hook/shabadoubi_touch_henshin/wait' : 20,
   \ },
\}

au FileType qf nnoremap <silent><buffer>q :quit<CR>
au FileType bf nnoremap <silent><buffer>q :quit<CR>
set splitbelow
noremap qr :QuickRun <CR>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"


NeoBundle 'thinca/vim-fontzoom'

NeoBundle 'tpope/vim-surround'

NeoBundle 'scrooloose/nerdtree'
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeShowBookmarks=1

NeoBundle 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeLimitedSyntax = 1
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1 
let g:NERDTreeHighlightFoldersFullName = 1 

NeoBundle 'Shougo/neocomplcache.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

NeoBundle 'ryanoasis/vim-devicons'
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_unite = 1
let g:webdevicons_enable_airline_tabline = 1
let g:webdevicons_enable_airline_statusline = 1
let g:WebDevIconsUnicodeDecorateFileNodes = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = 'ƛ'
let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''
let g:DevIconsEnableFoldersOpenClose = 1
let WebDevIconsUnicodeDecorateFolderNodesExactMatches = 1
autocmd FileType nerdtree setlocal nolist
set updatetime=50

call neobundle#end()
filetype plugin indent on
NeoBundleCheck
